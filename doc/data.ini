{name=[==[bbframework]==],path=[==[bbframework]==],children={{name=[==[client]==],path=[==[bbframework.client]==],children={},others={},},{name=[==[server]==],path=[==[bbframework.server]==],children={{name=[==[gamenetwork]==],path=[==[bbframework.server.gamenetwork]==],children={},others={},},{name=[==[socket]==],path=[==[bbframework.server.socket]==],children={},others={},},},others={},},{name=[==[shared]==],path=[==[bbframework.shared]==],children={{name=[==[encoding]==],path=[==[bbframework.shared.encoding]==],children={},others={},},{name=[==[json]==],path=[==[bbframework.shared.json]==],children={},others={},},{name=[==[timer]==],path=[==[bbframework.shared.timer]==],children={},others={},},{name=[==[util]==],path=[==[bbframework.shared.util]==],children={{name=[==[UAction.lua]==],path=[==[bbframework.shared.util.UAction.lua]==],brief=[==[动画工具类，定义动画相关操作方法及逻辑实现。]==],intro=[==[-   指定动画逻辑。
-   提供便捷生成动画接口。]==],link=[==[]==],aliases={},fields={{name=[==[ACTION_NAME_CLASS_MAPPER]==],type=[==[<<un-detected>>]==],intro=[==[动作名称类型映射关系表]==],},{name=[==[NAME_CALLFUNC]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCCallFunc]==],},{name=[==[NAME_FUNC]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCCallFunc]==],},{name=[==[NAME_FN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCCallFunc]==],},{name=[==[NAME_SHOW]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCShow]==],},{name=[==[NAME_HIDE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCHide]==],},{name=[==[NAME_TOGGLE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCToggleVisible]==],},{name=[==[NAME_TOGGLEVISIBLITY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCToggleVisiblity]==],},{name=[==[NAME_PLACE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCPlace]==],},{name=[==[NAME_REUSEGRID]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCReuseGrid]==],},{name=[==[NAME_STOPGRID]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCStopGrid]==],},{name=[==[NAME_FLIPX]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCFlipX]==],},{name=[==[NAME_FLIPY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCFlipY]==],},{name=[==[NAME_FOLLOW]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCFollow]==],},{name=[==[NAME_SPEED]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCSpeed]==],},{name=[==[NAME_BLINK]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCBlink]==],},{name=[==[NAME_DECCELAMPLITUDE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCDeccelAmplitude]==],},{name=[==[NAME_BEZIERTO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCBezierTo]==],},{name=[==[NAME_BEZIERBY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCBezierBy]==],},{name=[==[NAME_DELAYTIME]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCDelayTime]==],},{name=[==[NAME_DELAY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCDelayTime]==],},{name=[==[NAME_FADEIN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCFadeIn]==],},{name=[==[NAME_FADEOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCFadeOut]==],},{name=[==[NAME_FADETO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCFadeTo]==],},{name=[==[NAME_GRIDACTION]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCGridAction]==],},{name=[==[NAME_JUMPTO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCJumpTo]==],},{name=[==[NAME_JUMPBY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCJumpBy]==],},{name=[==[NAME_MOVETO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCMoveTo]==],},{name=[==[NAME_MOVEBY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCMoveBy]==],},{name=[==[NAME_REPEATX]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCRepeat]==],},{name=[==[NAME_REPEATFOREVER]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCRepeatForever]==],},{name=[==[NAME_EVER]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCRepeatForever]==],},{name=[==[NAME_REVERSETIME]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCReverseTime]==],},{name=[==[NAME_REVERSE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCReverseTime]==],},{name=[==[NAME_ROTATETO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCRotateTo]==],},{name=[==[NAME_ROTATEBY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCRotateBy]==],},{name=[==[NAME_SCALETO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCScaleTo]==],},{name=[==[NAME_SCALEBY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCScaleBy]==],},{name=[==[NAME_SKEWTO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCSkewTo]==],},{name=[==[NAME_SKEWBY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCSkewBy]==],},{name=[==[NAME_SEQUENCE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCSequence]==],},{name=[==[NAME_SPAWN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCSpawn]==],},{name=[==[NAME_TINTTO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCTintTo]==],},{name=[==[NAME_TINTBY]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCTintBy]==],},{name=[==[NAME_ACCELAMPLITUDE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCAccelAmplitude]==],},{name=[==[NAME_ACCELDECCELAMPLITUDE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCAccelDeccelAmplitude]==],},{name=[==[NAME_ACTIONCAMERA]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCActionCamera]==],},{name=[==[NAME_ACTIONEASE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCActionEase]==],},{name=[==[NAME_ANIMATE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCAnimate]==],},{name=[==[NAME_PROGRESSFROMTO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCProgressFromTo]==],},{name=[==[NAME_PROGRESSTO]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCProgressTo]==],},{name=[==[NAME_STOP]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_REMOVE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_DELETE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_KILL]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FRAME]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FILE]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FRAMENAMES]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FRAMEREPEAT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FILEREPEAT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FRAMENAMESREPEAT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FRAME_REPEAT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FILE_REPEAT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_FRAMENAMES_REPEAT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_CALLBACK]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_EASING]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: nil]==],},{name=[==[NAME_EASEIN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseIn]==],},{name=[==[NAME_EASEOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseOut]==],},{name=[==[NAME_EASEINOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseInOut]==],},{name=[==[NAME_EASEEXPONENTIALIN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseExponentialIn]==],},{name=[==[NAME_EASEEXPONENTIALOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseExponentialOut]==],},{name=[==[NAME_EASEEXPONENTIALINOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseExponentialInOut]==],},{name=[==[NAME_EASESINEIN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseSineIn]==],},{name=[==[NAME_EASESINEOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseSineOut]==],},{name=[==[NAME_EASESINEINOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseSineInOut]==],},{name=[==[NAME_EASEELASTICIN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseElasticIn]==],},{name=[==[NAME_EASEELASTICOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseElasticOut]==],},{name=[==[NAME_EASEELASTICINOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseElasticInOut]==],},{name=[==[NAME_EASEBOUNCEIN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseBounceIn]==],},{name=[==[NAME_EASEBOUNCEOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseBounceOut]==],},{name=[==[NAME_EASEBOUNCEINOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseBounceInOut]==],},{name=[==[NAME_EASEBACKIN]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseBackIn]==],},{name=[==[NAME_EASEBACKOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseBackOut]==],},{name=[==[NAME_EASEBACKINOUT]==],type=[==[<<un-detected>>]==],intro=[==[动作名称: CCEaseBackInOut]==],},},methods={{name=[==[animationWithFile]==],brief=[==[使用图片文件方式(png*N)生成一个动画(CCAnimation)对象]==],intro=[==[]==],usage=[==[UAction.animationWithFile({ prefix = "动画文件前缀名称", num = "动画帧数", interval = "动画帧间隔" })]==],notice=[==[使用animationWithFile这个方法需要满足两个前提: 
    1. 动画图片文件的名字带有从1开始计数的连续数字。 
    2. 动画图片文件必须是.png文件。]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[prefix]==],type=[==[string]==],intro=[==[动画文件前缀名称]==],},{name=[==[num]==],type=[==[number]==],intro=[==[动画帧数]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimation]==],intro=[==[动画对象]==],},},},{name=[==[animationWithFrame]==],brief=[==[使用图片帧方式(png+plist)生成一个动画(CCAnimation)对象]==],intro=[==[]==],usage=[==[UAction.animationWithFrame({ prefix = "动画帧前缀名称", num = "动画帧数", interval = "动画帧间隔" })]==],notice=[==[使用animationWithFrame这个方法需要满足两个前提: 
    1. 动画帧文件的名字带有从1开始计数的连续数字。 
    2. 动画帧文件必须是.png文件。]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[prefix]==],type=[==[string]==],intro=[==[动画文件前缀名称]==],},{name=[==[num]==],type=[==[number]==],intro=[==[动画帧数]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimation]==],intro=[==[动画对象]==],},},},{name=[==[animationWithFileNames]==],brief=[==[使用图片帧名称集合(file*N)生成一个动画(CCAnimation)对象]==],intro=[==[]==],usage=[==[UAction.animationWithFileNames({ names = "动画名称集合", interval = "动画帧间隔" })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[names]==],type=[==[table]==],intro=[==[动画名称集合]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimation]==],intro=[==[动画对象]==],},},},{name=[==[animationWithFrameNames]==],brief=[==[使用图片帧名称集合(frame*N)生成一个动画(CCAnimation)对象]==],intro=[==[]==],usage=[==[UAction.animationWithFrameNames({ names = "动画帧名称集合", interval = "动画帧间隔" })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[names]==],type=[==[table]==],intro=[==[动画帧名称集合]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimation]==],intro=[==[动画对象]==],},},},{name=[==[animateWithFile]==],brief=[==[使用图片文件方式(png*N)生成一个动画(Animate)对象]==],intro=[==[]==],usage=[==[UAction.animateWithFile({ prefix = "动画文件前缀名称", num = "动画帧数", interval = "动画帧间隔" })]==],notice=[==[使用animationWithFile这个方法需要满足两个前提: 
    1. 动画图片文件的名字带有从1开始计数的连续数字。 
    2. 动画图片文件必须是.png文件。]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.animateWithFile]==]},},examples={},params={{name=[==[prefix]==],type=[==[string]==],intro=[==[动画文件前缀名称]==],},{name=[==[num]==],type=[==[number]==],intro=[==[动画帧数]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimate]==],intro=[==[动画对象]==],},},},{name=[==[animateWithFrame]==],brief=[==[使用图片帧方式(png+plist)生成一个动画(CCAnimate)对象]==],intro=[==[]==],usage=[==[UAction.animateWithFrame({ prefix = "动画帧前缀名称", num = "动画帧数", interval = "动画帧间隔" })]==],notice=[==[使用animationWithFrame这个方法需要满足两个前提: 
    1. 动画帧文件的名字带有从1开始计数的连续数字。 
    2. 动画帧文件必须是.png文件。]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.actionFrame]==]},},examples={},params={{name=[==[prefix]==],type=[==[string]==],intro=[==[动画文件前缀名称]==],},{name=[==[num]==],type=[==[number]==],intro=[==[动画帧数]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimate]==],intro=[==[动画对象]==],},},},{name=[==[animateWithFileNames]==],brief=[==[使用图片帧名称集合(file*N)生成一个动画(CCAnimate)对象]==],intro=[==[]==],usage=[==[UAction.animateWithFileNames({ names = "动画文件名称集合", interval = "动画帧间隔" })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.actionFileNames]==]},},examples={},params={{name=[==[names]==],type=[==[table]==],intro=[==[动画文件名称集合]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimate]==],intro=[==[动画对象]==],},},},{name=[==[animateWithFrameNames]==],brief=[==[使用图片帧名称集合(frame*N)生成一个动画(CCAnimate)对象]==],intro=[==[]==],usage=[==[UAction.animationWithFrameNames({ names = "动画帧名称集合", interval = "动画帧间隔" })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.actionFrameNames]==]},},examples={},params={{name=[==[names]==],type=[==[table]==],intro=[==[动画帧名称集合]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimate]==],intro=[==[动画对象]==],},},},{name=[==[animateWithFileRepeat]==],brief=[==[[重复]使用图片文件方式(png*N)生成一个动画(CCAnimate)对象]==],intro=[==[]==],usage=[==[UAction.animateWithFileRepeat({ prefix = "动画文件前缀名称", num = "动画帧数", interval = "动画帧间隔" })]==],notice=[==[使用animationWithFile这个方法需要满足两个前提: 
    1. 动画图片文件的名字带有从1开始计数的连续数字。 
    2. 动画图片文件必须是.png文件。]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.actionFileRepeat]==]},},examples={},params={{name=[==[prefix]==],type=[==[string]==],intro=[==[动画文件前缀名称]==],},{name=[==[num]==],type=[==[number]==],intro=[==[动画帧数]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimate]==],intro=[==[动画对象]==],},},},{name=[==[animateWithFrameRepeat]==],brief=[==[[重复]使用图片帧方式(png+plist)生成一个动画(CCAnimate)对象]==],intro=[==[]==],usage=[==[UAction.animateWithFrameRepeat({ prefix = "动画帧前缀名称", num = "动画帧数", interval = "动画帧间隔" })]==],notice=[==[使用animationWithFrame这个方法需要满足两个前提: 
    1. 动画帧文件的名字带有从1开始计数的连续数字。 
    2. 动画帧文件必须是.png文件。]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.actionFrameRepeat]==]},},examples={},params={{name=[==[prefix]==],type=[==[string]==],intro=[==[动画文件前缀名称]==],},{name=[==[num]==],type=[==[number]==],intro=[==[动画帧数]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimate]==],intro=[==[动画对象]==],},},},{name=[==[animateWithFileNamesRepeat]==],brief=[==[[重复]使用图片帧名称集合(file*N)生成一个动画(CCAnimate)对象]==],intro=[==[]==],usage=[==[UAction.animateWithFileNamesRepeat({ names = "动画文件名称集合", interval = "动画帧间隔" })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.actionFileNamesRepeat]==]},},examples={},params={{name=[==[names]==],type=[==[table]==],intro=[==[动画文件名称集合]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimate]==],intro=[==[动画对象]==],},},},{name=[==[animateWithFrameNamesRepeat]==],brief=[==[[重复]使用图片帧名称集合(frame*N)生成一个动画(CCAnimate)对象]==],intro=[==[]==],usage=[==[UAction.animateWithFrameNamesRepeat({ names = "动画帧名称集合", interval = "动画帧间隔" })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.actionFrameNamesRepeat]==]},},examples={},params={{name=[==[names]==],type=[==[table]==],intro=[==[动画帧名称集合]==],},{name=[==[interval]==],type=[==[number]==],intro=[==[动画帧间隔]==],},},returns={{name=[==[]==],type=[==[CCAnimate]==],intro=[==[动画对象]==],},},},{name=[==[frameNameAtIndex]==],brief=[==[[废弃]根据帧前缀及指定索引获得帧名称]==],intro=[==[]==],usage=[==[UAction.frameNameAtIndex(索引, 帧前缀)]==],notice=[==[]==],state=[==[1]==],link=[==[UAction.nameAtIndex(index, prefix)]==],aliases={},examples={},params={{name=[==[index]==],type=[==[number]==],intro=[==[索引]==],},{name=[==[prefix]==],type=[==[string]==],intro=[==[帧前缀]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[动画帧名称]==],},},},{name=[==[frameNameAtFirst]==],brief=[==[[废弃]根据帧前缀获得第一个动画帧名称]==],intro=[==[]==],usage=[==[UAction.frameNameAtFirst(帧前缀)]==],notice=[==[]==],state=[==[1]==],link=[==[UAction.nameAtFirst(prefix)]==],aliases={},examples={},params={{name=[==[prefix]==],type=[==[string]==],intro=[==[帧前缀]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[动画帧名称]==],},},},{name=[==[nameAtIndex]==],brief=[==[根据名称前缀及指定索引获得动画名称]==],intro=[==[]==],usage=[==[UAction.nameAtIndex(索引, 帧前缀)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.nameAt]==]},},examples={},params={{name=[==[index]==],type=[==[number]==],intro=[==[索引]==],},{name=[==[prefix]==],type=[==[string]==],intro=[==[名称前缀]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[动画名称]==],},},},{name=[==[nameAtFirst]==],brief=[==[根据名称前缀引获得第一个动画名称]==],intro=[==[]==],usage=[==[UAction.nameAtFirst(帧前缀)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.nameFirst]==]},},examples={},params={{name=[==[prefix]==],type=[==[string]==],intro=[==[名称前缀]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[动画名称]==],},},},{name=[==[pauseAllSchedulerAndActions]==],brief=[==[暂停所有调度器和动作]==],intro=[==[]==],usage=[==[UAction.pauseAllSchedulerAndActions()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.pauseAll]==]},},examples={},params={},returns={},},{name=[==[pauseAllSchedulers]==],brief=[==[暂停所有调度器]==],intro=[==[]==],usage=[==[UAction.pauseAllSchedulers()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={},},{name=[==[pauseAllActions]==],brief=[==[暂停所有动作]==],intro=[==[]==],usage=[==[UAction.pauseAllActions()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={},},{name=[==[pauseActionsInTargets]==],brief=[==[暂停指定对象集的所有动作]==],intro=[==[遍历所有指定的对象, 将它们的动作停止]==],usage=[==[UAction.pauseActionsInTargets(对象集)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[targets]==],type=[==[table]==],intro=[==[对象集]==],},},returns={},},{name=[==[resumeAllSchedulerAndActions]==],brief=[==[恢复所有调度器和动作]==],intro=[==[]==],usage=[==[UAction.resumeAllSchedulerAndActions()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.resumeAll]==]},},examples={},params={},returns={},},{name=[==[resumeAllSchedulers]==],brief=[==[恢复所有调度器]==],intro=[==[]==],usage=[==[UAction.resumeAllSchedulers()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={},},{name=[==[resumeAllActions]==],brief=[==[恢复所有动作]==],intro=[==[]==],usage=[==[UAction.resumeAllActions()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={},},{name=[==[resumeActionsInTargets]==],brief=[==[恢复指定对象集的所有动作]==],intro=[==[遍历所有指定的对象, 将它们的动作恢复]==],usage=[==[UAction.resumeActionsInTargets(对象集)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[targets]==],type=[==[table]==],intro=[==[对象集]==],},},returns={},},{name=[==[playAnimation]==],brief=[==[快捷播放动画]==],intro=[==[]==],usage=[==[UAction.playAnimation({
        target              = 动画结点,
        resource            = 资源名称(会首先addSpriteFramesWithFile),
        pattern             = 资源格式化字符串,
        num                 = 帧数量,
        playTime            = 播放时长,
        defaultDisplayIndex = 默认帧索引,
        forever             = 是否无限循环动画,
        removeWhenFinished  = 是否在动画结束后删除结点,
        onComplete          = 结果回调,
        delay               = 延迟时间,
    })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAction.play]==]},},examples={},params={{name=[==[target]==],type=[==[CCNode]==],intro=[==[动画结点]==],},{name=[==[resource]==],type=[==[string]==],intro=[==[资源名称(会首先addSpriteFramesWithFile)]==],},{name=[==[pattern]==],type=[==[string]==],intro=[==[资源格式化字符串]==],},{name=[==[num]==],type=[==[number]==],intro=[==[帧数量]==],},{name=[==[playTime]==],type=[==[number]==],intro=[==[播放时长]==],},{name=[==[defaultDisplayIndex]==],type=[==[number]==],intro=[==[默认帧索引]==],},{name=[==[forever]==],type=[==[bool]==],intro=[==[是否无限循环动画]==],},{name=[==[removeWhenFinished]==],type=[==[bool]==],intro=[==[是否在动画结束后删除结点]==],},{name=[==[onComplete]==],type=[==[function]==],intro=[==[结果回调]==],},{name=[==[delay]==],type=[==[number]==],intro=[==[延迟时间]==],},},returns={{name=[==[]==],type=[==[CCNode]==],intro=[==[动画结点]==],},},},{name=[==[line]==],brief=[==[顺序执行动作集]==],intro=[==[]==],usage=[==[UAction.resumeActionsInTargets(对象集)]==],notice=[==[UAction.line({
        动作信息对象1,
        动作信息对象2,
        ...
    })]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[A.line({
        { "delay", 1.0 },
        { "frame", "anim_", 10, .1 } }, 
        { "moveTo", ccp(10, 10) },
        { "scaleTo", 2.0 },
        { "func", 
            function() 

            end 
        },
        ...
    })]==],},},params={{name=[==[params]==],type=[==[table]==],intro=[==[配置参数集合(二维)]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},{name=[==[union]==],brief=[==[同时执行动作集]==],intro=[==[]==],usage=[==[UAction.union({
        动作信息对象1,
        动作信息对象2,
        ...
    })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[A.union({
        { "delay", 1.0 },
        { "frame", "anim_", 10, .1 } },   
        { "moveTo", ccp(10, 10) },
        { "scaleTo", 2.0 },
        { "func", 
            function() 

            end 
        },
        ...
    })]==],},},params={{name=[==[params]==],type=[==[table]==],intro=[==[配置参数集合(二维)]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},{name=[==[cycle]==],brief=[==[顺序并循环执行动作集]==],intro=[==[]==],usage=[==[UAction.cycle({
        动作信息对象1,
        动作信息对象2,
        ...
    })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[A.cycle({
        { "delay", 1.0 },
        { "frame", { prefix = "anim_", frameCount = 10, interval = .1 } },   
        { "moveTo", ccp(10, 10) },
        { "scaleTo", 2.0 },
        { "func", function() end },
        { "easing", "SineIn", { "moveTo", ccp(10, 10) }, 0.3 },
        ...
    })]==],},},params={{name=[==[params]==],type=[==[table]==],intro=[==[配置参数集合(二维)]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},{name=[==[one]==],brief=[==[执行单个动作]==],intro=[==[]==],usage=[==[UAction.one(动作信息对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[A.one({ "moveTo", ccp(100, 100) }):at(node)]==],},},params={{name=[==[params]==],type=[==[table]==],intro=[==[配置参数(一维)]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},{name=[==[analyzeAction]==],brief=[==[解析动作信息, 生成动作对象]==],intro=[==[]==],usage=[==[UAction.analyzeAction(动作信息对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[params]==],type=[==[table]==],intro=[==[配置参数(一维)]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},{name=[==[analyzeActions]==],brief=[==[解析动作信息集合, 生成动作对象]==],intro=[==[]==],usage=[==[UAction.analyzeActions({
        动作信息对象1,
        动作信息对象2,
        ...
    })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[params]==],type=[==[table]==],intro=[==[配置参数集合(二维)]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},{name=[==[spawn]==],brief=[==[生成合并动作]==],intro=[==[]==],usage=[==[UAction.spawn({
        动作1,
        动作2,
        ...
    })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[actions]==],type=[==[table]==],intro=[==[动作集]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},{name=[==[sequence]==],brief=[==[生成序列动作]==],intro=[==[]==],usage=[==[UAction.sequence({
        动作1,
        动作2,
        ...
    })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[actions]==],type=[==[table]==],intro=[==[动作集]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},{name=[==[sequenceRepeat]==],brief=[==[生成重复序列动作]==],intro=[==[]==],usage=[==[UAction.sequenceRepeat({
        动作1,
        动作2,
        ...
    })]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[actions]==],type=[==[table]==],intro=[==[动作集]==],},},returns={{name=[==[]==],type=[==[CCAction]==],intro=[==[动作对象]==],},},},},},{name=[==[UAssert.lua]==],path=[==[bbframework.shared.util.UAssert.lua]==],brief=[==[断言工具类，定义断言相关操作方法及逻辑实现。]==],intro=[==[-   指定逻辑断言。
-   公共断言定义。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[inherit]==],brief=[==[验证派生合法性(验证是否派生至某个类)]==],intro=[==[]==],usage=[==[UAssert.inherit(提示标签, 对象, 类)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证对象是否派生自某类型>>
    local spirte = D.img("node.png")
    local clazz  = CCSprite
    UAssert.inherit(game.TAG, spirte, clazz)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[instance]==],type=[==[object]==],intro=[==[对象]==],},{name=[==[clazz]==],type=[==[userdata]==],intro=[==[类]==],},},returns={},},{name=[==[classname]==],brief=[==[验证派生合法性(验证是否是某个类)]==],intro=[==[]==],usage=[==[UAssert.classname(提示标签, 对象, 类名称)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证对象的类型是否是指定类型>>
    local spirte = D.img("node.png")
    local className = "CCSprite"
    UAssert.classname(game.TAG, spirte, className)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[instance]==],type=[==[object]==],intro=[==[对象]==],},{name=[==[className]==],type=[==[string]==],intro=[==[类名称]==],},},returns={},},{name=[==[hasProperty]==],brief=[==[验证对象是否拥有指定的某个属性]==],intro=[==[]==],usage=[==[UAssert.hasProperty(提示标签, 对象, 属性名称)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAssert.property]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证对象含有某个属性>>
    local instance = D.img("node.png")
    local propertyName = "getContentSize"
    UAssert.hasProperty(game.TAG, instance, propertyName)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[instance]==],type=[==[object]==],intro=[==[对象]==],},{name=[==[propertyName]==],type=[==[string]==],intro=[==[属性名称]==],},},returns={},},{name=[==[hasProperties]==],brief=[==[验证对象是否拥有指定的多个属性]==],intro=[==[]==],usage=[==[UAssert.hasProperties(提示标签, 对象, 属性名称集合)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAssert.property]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证对象含有某些属性>>
    local instance = D.img("node.png")
    local propertyNames = { "getContentSize", "setContentSize" }
    UAssert.hasProperties(game.TAG, instance, propertyNames)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[instance]==],type=[==[object]==],intro=[==[对象]==],},{name=[==[propertyNames]==],type=[==[string]==],intro=[==[属性名称集合]==],},},returns={},},{name=[==[isNil]==],brief=[==[验证对象是否为空]==],intro=[==[]==],usage=[==[UAssert.isNil(提示标签, 对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证对象是否为nil>>
    local instance = D.img("node.png")
    UAssert.isNil(game.TAG, instance)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[instance]==],type=[==[object]==],intro=[==[实例]==],},},returns={},},{name=[==[isNotNil]==],brief=[==[验证对象是否不为空]==],intro=[==[]==],usage=[==[UAssert.isNotNil(提示标签, 对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAssert.notNil]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证对象是否不为nil>>
    local instance = D.img("node.png")
    UAssert.isNotNil(game.TAG, instance)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[instance]==],type=[==[object]==],intro=[==[实例]==],},},returns={},},{name=[==[tableEmpty]==],brief=[==[验证表是否为空]==],intro=[==[]==],usage=[==[UAssert.tableEmpty(提示标签, 表对象, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证表对象是否为空>>
    local object = {}
    UAssert.tableEmpty(game.TAG, object)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object]==],type=[==[table]==],intro=[==[表对象]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[tableNotEmpty]==],brief=[==[验证表是否不为空]==],intro=[==[]==],usage=[==[UAssert.tableNotEmpty(提示标签, 表对象, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证表对象是否不为空>>
    local object = { "item1" }
    UAssert.tableNotEmpty(game.TAG, object)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object]==],type=[==[table]==],intro=[==[表对象]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[tableCount]==],brief=[==[验证表是否不为空]==],intro=[==[]==],usage=[==[UAssert.tableNotEmpty(提示标签, 表对象, 表元素数量, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- <<说明：验证表的数量是否匹配>>
    -- 参数集合 
    local params = {
        varA = "I'm a string!", 
        varB = {}, 
        varC = true,  
    }
    UAssert.tableCount(game.TAG, params, 3)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object]==],type=[==[table]==],intro=[==[表对象]==],},{name=[==[count]==],type=[==[number]==],intro=[==[表元素数量]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[numberInRangeNotIncludeBound]==],brief=[==[验证数字是否在指定的区间范围(不包括边界值)]==],intro=[==[]==],usage=[==[UAssert.numberInRangeNotIncludeBound(提示标签, 数字对象, 区间最小值, 区间最大值, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证数字对象是否在区间内(不包括左右边界值)>>
    J.numberInRangeNotIncludeBound(game.TAG, 10, 1, 10)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object]==],type=[==[object]==],intro=[==[数字对象]==],},{name=[==[min]==],type=[==[number]==],intro=[==[区间最小值]==],},{name=[==[max]==],type=[==[number]==],intro=[==[区间最大值]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[numberInRangeIncludeBound]==],brief=[==[验证数字是否在指定的区间范围(包括边界值)]==],intro=[==[]==],usage=[==[UAssert.numberInRangeIncludeBound(提示标签, 数字对象, 区间最小值, 区间最大值, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[-- 示例1:]==]},{name=[==[-- <<说明：验证数字对象是否在区间内(包括左右边界值)>>]==]},{name=[==[J.numberInRangeIncludeBound(game.TAG, 10, 1, 10)]==]},},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object]==],type=[==[object]==],intro=[==[数字对象]==],},{name=[==[min]==],type=[==[number]==],intro=[==[区间最小值]==],},{name=[==[max]==],type=[==[number]==],intro=[==[区间最大值]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[numberInRange]==],brief=[==[验证数字是否在指定的区间范围]==],intro=[==[]==],usage=[==[UAssert.numberInRange(提示标签, 数字对象, 区间最小值, 区间最大值, 是否包含区间最小值, 是否包含区间最大值, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证1是否在区间(1, 10]内(左开右闭)>>
    J.numberInRange(game.TAG, 1, 1, 10, false, true)


    ---------


    -- 示例2: 
    -- <<说明：验证10是否在区间(1, 10]内(左开右闭)>>
    J.numberInRange(game.TAG, 10, 1, 10, false, true)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object]==],type=[==[object]==],intro=[==[数字对象]==],},{name=[==[min]==],type=[==[number]==],intro=[==[区间最小值]==],},{name=[==[max]==],type=[==[number]==],intro=[==[区间最大值]==],},{name=[==[isIncludeMin]==],type=[==[bool]==],intro=[==[是否包含区间最小值]==],},{name=[==[isIncludeMax]==],type=[==[bool]==],intro=[==[是否包含区间最大值]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[equal]==],brief=[==[验证两个对象是否相等]==],intro=[==[]==],usage=[==[UAssert.equal(提示标签, 对象1, 对象2, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证对象是否相等>>
    UAssert.equal(game.TAG, D.img("node.png"), D.img("node.png"))]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object1]==],type=[==[object]==],intro=[==[对象1]==],},{name=[==[object2]==],type=[==[object]==],intro=[==[对象2]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[notEqual]==],brief=[==[验证两个对象是否不相等]==],intro=[==[]==],usage=[==[UAssert.notEqual(提示标签, 对象1, 对象2, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAssert.notequal]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证对象是否不相等>>
    UAssert.notEqual(game.TAG, D.img("node.png"), D.img("node.png"))]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object1]==],type=[==[object]==],intro=[==[对象1]==],},{name=[==[object2]==],type=[==[object]==],intro=[==[对象2]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[numberEqual]==],brief=[==[验证两个数字是否相等]==],intro=[==[]==],usage=[==[UAssert.numberEqual(提示标签, 数字对象1, 数字对象2, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证数字1是否相等于数字2>>
    UAssert.numberEqual(game.TAG, 10, 10)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object1]==],type=[==[object]==],intro=[==[数字对象1]==],},{name=[==[object2]==],type=[==[object]==],intro=[==[数字对象2]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[numberGreater]==],brief=[==[验证数字1是否大于数字2]==],intro=[==[]==],usage=[==[UAssert.numberGreater(提示标签, 数字对象1, 数字对象2, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证数字1是否大于数字2>>
    UAssert.numberGreater(game.TAG, 10, 10)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object1]==],type=[==[object]==],intro=[==[数字对象1]==],},{name=[==[object2]==],type=[==[object]==],intro=[==[数字对象2]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[numberLess]==],brief=[==[验证数字1是否小于数字2]==],intro=[==[]==],usage=[==[UAssert.numberLess(提示标签, 数字对象1, 数字对象2, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证数字1是否小于数字2>>
    UAssert.numberLess(game.TAG, 10, 10)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object1]==],type=[==[object]==],intro=[==[数字对象1]==],},{name=[==[object2]==],type=[==[object]==],intro=[==[数字对象2]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[numberGreaterEqual]==],brief=[==[验证数字1是否大等于数字2]==],intro=[==[]==],usage=[==[UAssert.numberGreaterEqual(提示标签, 数字对象1, 数字对象2, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证数字1是否大等于数字2>>
    UAssert.numberGreaterEqual(game.TAG, 10, 10)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object1]==],type=[==[object]==],intro=[==[数字对象1]==],},{name=[==[object2]==],type=[==[object]==],intro=[==[数字对象2]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[numberLessEqual]==],brief=[==[验证数字1是否小等于数字2]==],intro=[==[]==],usage=[==[UAssert.numberLessEqual(提示标签, 数字对象1, 数字对象2, 错误消息)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证数字1是否小等于数字2>>
    UAssert.numberLessEqual(game.TAG, 10, 10)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[object1]==],type=[==[object]==],intro=[==[数字对象1]==],},{name=[==[object2]==],type=[==[object]==],intro=[==[数字对象2]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},{name=[==[typeString]==],brief=[==[验证参数是否是指定的类型[字符串]]==],intro=[==[]==],usage=[==[UAssert.typeString(提示标签, 参数对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证类型>>
    UAssert.typeString(game.TAG, "string")]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[param]==],type=[==[object]==],intro=[==[参数对象]==],},},returns={},},{name=[==[typeTable]==],brief=[==[验证参数是否是指定的类型[表]]==],intro=[==[]==],usage=[==[UAssert.typeTable(提示标签, 参数对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证类型>>
    UAssert.typeTable(game.TAG, {})]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[param]==],type=[==[object]==],intro=[==[参数对象]==],},},returns={},},{name=[==[typeNumber]==],brief=[==[验证参数是否是指定的类型[数字]]==],intro=[==[]==],usage=[==[UAssert.typeNumber(提示标签, 参数对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证类型>>
    UAssert.typeNumber(game.TAG, 0)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[param]==],type=[==[object]==],intro=[==[参数对象]==],},},returns={},},{name=[==[typeBool]==],brief=[==[验证参数是否是指定的类型[布尔]]==],intro=[==[]==],usage=[==[UAssert.typeBool(提示标签, 参数对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAssert.typeBoolean]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证类型>>
    UAssert.typeBool(game.TAG, true)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[param]==],type=[==[object]==],intro=[==[参数对象]==],},},returns={},},{name=[==[typeUserData]==],brief=[==[验证参数是否是指定的类型[用户类型]]==],intro=[==[]==],usage=[==[UAssert.typeUserData(提示标签, 参数对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证类型>>
    UAssert.typeUserData(game.TAG, D.newLayer())]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[param]==],type=[==[object]==],intro=[==[参数对象]==],},},returns={},},{name=[==[type]==],brief=[==[验证参数是否是指定的类型]==],intro=[==[]==],usage=[==[UAssert.type(提示标签, 参数对象, 参数类型)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证类型-字符串>>
    UAssert.typeString(game.TAG, "string")


    ---------


    -- 示例2: 
    -- <<说明：验证类型-表>>
    UAssert.typeTable(game.TAG, {})


    ---------


    -- 示例3: 
    -- <<说明：验证类型-数字>>
    UAssert.typeNumber(game.TAG, 0)


    ---------


    -- 示例4: 
    -- <<说明：验证类型-布尔>>
    UAssert.typeBool(game.TAG, true)


    ---------


    -- 示例5: 
    -- <<说明：验证类型-用户数据>>
    UAssert.typeUserData(game.TAG, D.newLayer())]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[param]==],type=[==[object]==],intro=[==[参数对象]==],},{name=[==[clazz]==],type=[==[string]==],intro=[==[参数类型]==],},},returns={},},{name=[==[assertBatch]==],brief=[==[批量处理参数验证]==],intro=[==[]==],usage=[==[UAssert.assertBatch(提示标签, 方法名, 验证的参数集合(二维))]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAssert.parameters]==]},{name=[==[UAssert.p]==]},{name=[==[UAssert.batch]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证类的构造函数参数是否合法>>
    local params = { varA = "I'm a string!", varB = {}, varC = true,  }
    UAssert.assertBatch(SomeClass.TAG, "ctor(..)", 
    {
        { isstring(params.varA), "must be string!" },
        { istable(params.varB), "must be table!" },
        { isbool(params.varC), "must be bool!" },
    })


    ---------


    -- 示例2: 
    -- <<说明：验证CheckBox初始传入参数是否合法>>
    UAssert.assertBatch(CheckBox.TAG, "newCheckBox()", 
    {
        { istable(params), "parameters is not a table!" },
        { params.imgNormal, "<imgNormal> must be not empty!"},
        { params.imgPressed, "<imgPressed> must be not empty!" },
    })]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[methodName]==],type=[==[string]==],intro=[==[方法名, 为了更好定位到哪个方法]==],},{name=[==[params]==],type=[==[table]==],intro=[==[验证的参数集合(二维), 格式为{ {条件, 出错信息}, {条件, 出错信息}, ... }]==],},},returns={},},{name=[==[assertBatchType]==],brief=[==[批量处理参数类型验证]==],intro=[==[]==],usage=[==[UAssert.assertBatchType(提示标签, 方法名, 验证的参数集合(二维))]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAssert.parametersType]==]},{name=[==[UAssert.ptype]==]},{name=[==[UAssert.batchType]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证类的构造函数参数是否属于对应的类型>>
    -- 参数集合 
    local params = {
        varA = "I'm a string!", 
        varB = {}, 
        varC = true,  
    }
    -- 验证集合 
    local judges = {
       { params.varA, "string", },
       { params.varB, "table", "must be a table!" },
       { params.varC, "boolean", },
    }
    UAssert.assertBatchType(game.TAG, "ctor(..)", judges)]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[methodName]==],type=[==[string]==],intro=[==[方法名, 为了更好定位到哪个方法]==],},{name=[==[params]==],type=[==[table]==],intro=[==[验证的参数集合(二维), 格式为{ {字段名, 类型名, 出错信息}, {字段名, 类型名, 出错信息}, ... }]==],},},returns={},},{name=[==[assert]==],brief=[==[公共验证方法]==],intro=[==[]==],usage=[==[UAssert.assert(提示标签, 断言, 错误消息)]==],notice=[==[通常在代码中自定义的类都会声明一个TAG属性, 用于此处断言的tag引用
    代码如下:
    local M = class("SomeClass")
    M.TAG   = "SomeClass"
    ..
    local object = SomeClass.new()
    ..
    UAssert.assert(object.TAG, judge, "error message!")]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UAssert.a]==]},{name=[==[UAssert.judge]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：验证数据是否包含属性age>>
    UAssert.assert("Data", object:getProperty("age") ~= nil, "Data is not available because it must contains property 'age'!")


    ---------


    -- 示例2: 
    -- <<说明：验证资源字符串是否以.plist结尾>>
    UAssert.assert("Resource", UString.substringAfterLast(resource) == ".plist", "Resource must be .plist file!")]==],},},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},{name=[==[judge]==],type=[==[bool]==],intro=[==[断言]==],},{name=[==[errorMessage]==],type=[==[string]==],intro=[==[错误消息]==],},},returns={},},},},{name=[==[UAuxiliaryInterface.lua]==],path=[==[bbframework.shared.util.UAuxiliaryInterface.lua]==],brief=[==[界面辅助工具类，定义界面辅助相关操作方法及逻辑实现。]==],intro=[==[-   公共界面辅助方法定义。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[makeGrid]==],brief=[==[创建网格]==],intro=[==[]==],usage=[==[UAuxiliaryInterface.makeGrid(场景对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[names]==],type=[==[CCScene]==],intro=[==[场景对象]==],},},returns={},},},},{name=[==[UConvert.lua]==],path=[==[bbframework.shared.util.UConvert.lua]==],brief=[==[转换工具类，定义转换相关操作方法及逻辑实现。]==],intro=[==[-   指定转换相关方法。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[toCCNode]==],brief=[==[转换到类型[结点]]==],intro=[==[]==],usage=[==[UConvert.toCCNode(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = D.img("child.png"):p(100, 100):to(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCNode(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCLayer]==],brief=[==[转换到类型[层]]==],intro=[==[]==],usage=[==[UConvert.toCCLayer(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = D.newLayer():p(100, 100):to(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCLayer(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCSprite]==],brief=[==[转换到类型[精灵]]==],intro=[==[]==],usage=[==[UConvert.toCCSprite(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = D.img("child.png"):p(100, 100):to(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCSprite(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCLabelTTF]==],brief=[==[转换到类型[文本CCLabelTTF]]==],intro=[==[]==],usage=[==[UConvert.toCCLabelTTF(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UConvert.toCCLabelTTF]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = C.label({ fontName = "Arial", fontSize = 64, text = "Hello World" }):to(parent):inner(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCLabelTTF(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCLabelAtlas]==],brief=[==[转换到类型[文本CCLabelAtlas]]==],intro=[==[]==],usage=[==[UConvert.toCCLabelAtlas(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = C.label({ 
        mode         = UI_LABEL_MODE_ATLAS,
        text         = "1.23", 
        charMapFile  = "fps_images.png",
        itemWidth    = 24, 
        itemHeight   = 64, 
        startCharMap = string.byte("."),
    }):to(parent):inner(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCLabelAtlas(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCLabelBMFont]==],brief=[==[转换到类型[文本CCLabelBMFont]]==],intro=[==[]==],usage=[==[UConvert.toCCLabelBMFont(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = C.label({ 
        mode         = UI_LABEL_MODE_BMF,
        text         = "1.23", 
        -- ..,
    }):to(parent):inner(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCLabelBMFont(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCMenu]==],brief=[==[转换到类型[菜单CCMenu]]==],intro=[==[]==],usage=[==[UConvert.toCCMenu(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = CCNodeExtend.extend(CCMenu:create()):to(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCMenu(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCMenuItem]==],brief=[==[转换到类型[菜单项CCMenuItem]]==],intro=[==[]==],usage=[==[UConvert.toCCMenuItem(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCMenuItem(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCControlButton]==],brief=[==[转换到类型[按钮CCControlButton]]==],intro=[==[]==],usage=[==[UConvert.toCCControlButton(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCControlButton(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCTableView]==],brief=[==[转换到类型[表格视图CCTableView]]==],intro=[==[]==],usage=[==[UConvert.toCCTableView(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    -- [事件]
    -- 事件[滚动]
    local function fnScroll(trigger, view)

    end

    -- 事件[缩放]
    local function fnZoom(trigger, view)

    end

    -- 事件[单元格点击]
    local function fnCellTouched(trigger, table, cell)
        print("cell touched at index: " .. cell:getIdx())
    end

    -- 事件[单元格尺寸]
    local function fnCellSizeForIndex(trigger, table, idx)
        return 80, 80
    end

    -- 事件[单元格创建]
    local function fnCellAtIndex(trigger, table, idx)
        local strValue = string.format("%d", idx)
        -- 处理事件[返回]
        local cell = table:dequeueCell()
        local label = nil

        if nil == cell then
            cell = CCTableViewCell:new()

            D.img("node.png"):anchor(D.LEFT_BOTTOM):p(0,0):to(cell)
            label = C.label({ text = strValue, fontName = "Helvetica", fontSize = 20.0 }):p(0,0):anchor(D.LEFT_BOTTOM):to(cell, 0, 123)
        else
            label = tolua.cast(cell:getChildByTag(123),"CCLabelTTF")
            print(label)
            if nil ~= label then
                label:setString(strValue)
            end
        end

        return cell
    end

    -- 事件[单元格数量]
    local function fnNumberOfCellsInTableView(trigger, table)
        return 25
    end


    -- [实例化]
    -- 配置参数
    local params = {
        size                        = CCSize(300, 80),
        fnScroll                    = fnScroll,
        fnZoom                      = fnZoom,
        fnCellTouched               = fnCellTouched,
        fnCellSizeForIndex          = fnCellSizeForIndex,
        fnCellAtIndex               = fnCellAtIndex,
        fnNumberOfCellsInTableView  = fnNumberOfCellsInTableView,
    }
    -- 加载结点
    local node = UUI.loadTableView(params):p(CCPointCenter):to(layer)

    -- ...
    -- ...
    -- ...

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCTableView(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCScrollView]==],brief=[==[转换到类型[滚动视图CCScrollView]]==],intro=[==[]==],usage=[==[UConvert.toCCScrollView(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = D.img("child.png"):p(100, 100):to(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCScrollView(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCScale9Sprite]==],brief=[==[转换到类型[9宫精灵CCScale9Sprite]]==],intro=[==[]==],usage=[==[UConvert.toCCScale9Sprite(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = UUI.loadSpriteScale9({ 
        imgName     = "node.png", 
        rect        = CCRect(0, 0, 80, 80), 
        contentSize = CCSize(200, 100),
    })
    :to(parent)
    :inner(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCScale9Sprite(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toCCEditBox]==],brief=[==[转换到类型[文本框CCEditBox]]==],intro=[==[]==],usage=[==[UConvert.toCCEditBox(对象)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = UUI.loadEditBox({
        text        = "AC",
        placeHolder = "Please input your No.",
        images      = { normal = "normal.png", pressed = "pressed.png", disabled = "disabled.png" },
        size        = CCSize(200, 100),
        fnBegan     = function(trigger, event, sender) print(tostring(trigger), "fnBegan")   end,
        fnEnded     = function(trigger, event, sender) print(tostring(trigger), "fnEnded")   end,
        fnReturn    = function(trigger, event, sender) print(tostring(trigger), "fnReturn")  end,
        fnChanged   = function(trigger, event, sender) print(tostring(trigger), "fnChanged") end,
        trigger     = parent,
    })
    :to(parent)
    :inner(parent)

    -- 获得父结点的第一个子结点, 用于测试
    local objectFirst = parent:getChildren():objectAtIndex(0)
    local nodeFirst = UConvert.toCCEditBox(objectFirst)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[toXNode]==],brief=[==[转换到类型]==],intro=[==[]==],usage=[==[UConvert.toXNode(对象, 目标类型)]==],notice=[==[相比于UConvert.cast此方法主要是调用LuaNodeConverter中的方法实现]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型[CCNode]>>
    UConvert.toCCNode(object)


    ---------


    -- 示例2: 
    -- <<说明：转换结点到类型[CCLayer]>>
    UConvert.toCCLayer(object)


    ---------


    -- 示例3: 
    -- <<说明：转换结点到类型[CCSprite]>>
    UConvert.toCCSprite(object)


    ---------


    -- 示例4: 
    -- <<说明：转换结点到类型[CCLabel]>>
    UConvert.toCCLabel(object)


    ---------


    -- 示例5: 
    -- <<说明：转换结点到类型[CCLabelAtlas]>>
    UConvert.toCCLabelAtlas(object)


    ---------


    -- 示例6: 
    -- <<说明：转换结点到类型[CCLabelBMFont]>>
    UConvert.toCCLabelBMFont(object)


    ---------


    -- 示例7: 
    -- <<说明：转换结点到类型[CCMenu]>>
    UConvert.toCCMenu(object)


    ---------


    -- 示例8: 
    -- <<说明：转换结点到类型[CCMenuItem]>>
    UConvert.toCCMenuItem(object)


    ---------


    -- 示例9: 
    -- <<说明：转换结点到类型[CCControlButton]>>
    UConvert.toCCControlButton(object)


    ---------


    -- 示例10: 
    -- <<说明：转换结点到类型[CCTableView]>>
    UConvert.toCCTableView(object)


    ---------


    -- 示例11: 
    -- <<说明：转换结点到类型[CCScrollView]>>
    UConvert.toCCScrollView(object)


    ---------


    -- 示例12: 
    -- <<说明：转换结点到类型[CCScale9Sprite]>>
    UConvert.toCCScale9Sprite(object)


    ---------


    -- 示例13: 
    -- <<说明：转换结点到类型[CCEditBox]>>
    UConvert.toCCEditBox(object)]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},{name=[==[cast]==],brief=[==[转换到类型]==],intro=[==[]==],usage=[==[UConvert.cast(对象, 目标类型)]==],notice=[==[相比于UConvert.toXNode此方法更通用]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：转换结点到类型[CCNode]>>
    UConvert.cast(object, "CCNode")


    ---------


    -- 示例2: 
    -- <<说明：转换结点到类型[CCLayer]>>
    UConvert.cast(object, "CCLayer")]==],},},params={{name=[==[object]==],type=[==[object]==],intro=[==[对象]==],},{name=[==[objectType]==],type=[==[string]==],intro=[==[目标类型]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[转换类型后的对象]==],},},},},},{name=[==[UCrypto.lua]==],path=[==[bbframework.shared.util.UCrypto.lua]==],brief=[==[坐标点工具类，定义坐标点相关操作方法及逻辑实现。]==],intro=[==[-   指定坐标点相关方法。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[encryptAES256]==],brief=[==[AES256加密]==],intro=[==[]==],usage=[==[UCrypto.encryptAES256(文本, 密钥)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[local p = "Test123"
    local k = "KEYKEY"
    local c = UCrypto.encryptAES256(p, k)
    printf("source: %s", p)
    printf("encrypt AES256: %s", c)
    printf("decrypt AES256: %s", UCrypto.decryptAES256(c, k))]==],},},params={{name=[==[plaintext]==],type=[==[string]==],intro=[==[文本]==],},{name=[==[key]==],type=[==[string]==],intro=[==[密钥]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[加密后的文本]==],},},},{name=[==[decryptAES256]==],brief=[==[AES256解密]==],intro=[==[]==],usage=[==[UCrypto.decryptAES256(加密后的文本, 密钥)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[local p = "Test123"
    local k = "KEYKEY"
    local c = UCrypto.encryptAES256(p, k)
    printf("source: %s", p)
    printf("encrypt AES256: %s", c)
    printf("decrypt AES256: %s", UCrypto.decryptAES256(c, k))]==],},},params={{name=[==[ciphertext]==],type=[==[string]==],intro=[==[加密后的文本]==],},{name=[==[key]==],type=[==[string]==],intro=[==[密钥]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[解密后的文本]==],},},},{name=[==[encryptXXTEA]==],brief=[==[XXTEA加密]==],intro=[==[]==],usage=[==[UCrypto.encryptXXTEA(文本, 密钥)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[local p = "Test123"
    local k = "KEYKEY"
    local c = UCrypto.encryptXXTEA(p, k)
    printf("source: %s", p)
    printf("encrypt XXTEA: %s", UNumber.bin2hex(c))
    printf("decrypt XXTEA: %s", UCrypto.decryptXXTEA(c, k))

    local p = string.rep("HELLO", 15)
    local k = "keykey"
    local c = UCrypto.encryptXXTEA(p, k)
    printf("source: %s", p)
    printf("encrypt XXTEA: %s", UNumber.bin2hex(c))
    printf("decrypt XXTEA: %s", UCrypto.decryptXXTEA(c, k))]==],},},params={{name=[==[plaintext]==],type=[==[string]==],intro=[==[文本]==],},{name=[==[key]==],type=[==[string]==],intro=[==[密钥]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[加密后的文本]==],},},},{name=[==[decryptXXTEA]==],brief=[==[XXTEA加密]==],intro=[==[]==],usage=[==[UCrypto.decryptXXTEA(加密后的文本, 密钥)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[local p = "Test123"
    local k = "KEYKEY"
    local c = UCrypto.encryptXXTEA(p, k)
    printf("source: %s", p)
    printf("encrypt XXTEA: %s", UNumber.bin2hex(c))
    printf("decrypt XXTEA: %s", UCrypto.decryptXXTEA(c, k))

    local p = string.rep("HELLO", 15)
    local k = "keykey"
    local c = UCrypto.encryptXXTEA(p, k)
    printf("source: %s", p)
    printf("encrypt XXTEA: %s", UNumber.bin2hex(c))
    printf("decrypt XXTEA: %s", UCrypto.decryptXXTEA(c, k))]==],},},params={{name=[==[ciphertext]==],type=[==[string]==],intro=[==[加密后的文本]==],},{name=[==[key]==],type=[==[string]==],intro=[==[密钥]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[解密后的文本]==],},},},{name=[==[encodeBase64]==],brief=[==[Base64加密]==],intro=[==[]==],usage=[==[UCrypto.encodeBase64(文本)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[local p = "Test123"
    local c = UCrypto.encodeBase64(p)
    printf("source: %s", p)
    printf("encode Base64: %s", UNumber.bin2hex(c))
    printf("decode Base64: %s", UCrypto.decodeBase64(c))

    local p = string.rep("HELLO", 15)
    local c = UCrypto.encodeBase64(p)
    printf("source: %s", p)
    printf("encode Base64: %s", UNumber.bin2hex(c))
    printf("decode Base64: %s", UCrypto.decodeBase64(c))]==],},},params={{name=[==[plaintext]==],type=[==[string]==],intro=[==[文本]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[解密后的文本]==],},},},{name=[==[decodeBase64]==],brief=[==[Base64解密]==],intro=[==[]==],usage=[==[UCrypto.decodeBase64(加密后的文本)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[local p = "Test123"
    local c = UCrypto.encodeBase64(p)
    printf("source: %s", p)
    printf("encode Base64: %s", UNumber.bin2hex(c))
    printf("decode Base64: %s", UCrypto.decodeBase64(c))

    local p = string.rep("HELLO", 15)
    local c = UCrypto.encodeBase64(p)
    printf("source: %s", p)
    printf("encode Base64: %s", UNumber.bin2hex(c))
    printf("decode Base64: %s", UCrypto.decodeBase64(c))]==],},},params={{name=[==[ciphertext]==],type=[==[string]==],intro=[==[加密后的文本]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[解密后的文本]==],},},},{name=[==[md5]==],brief=[==[MD5加密]==],intro=[==[]==],usage=[==[UCrypto.decryptXXTEA(加密后的文本, 密钥)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[local p = string.rep("HELLO", 5)
    printf("md5Test: %s -> %s", p, UCrypto.md5(p))]==],},},params={{name=[==[plaintext]==],type=[==[string]==],intro=[==[文本]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[加密后的文本]==],},},},},},{name=[==[UDateTime.lua]==],path=[==[bbframework.shared.util.UDateTime.lua]==],brief=[==[日期时间工具类，定义日期时间相关操作方法及逻辑实现。]==],intro=[==[-   指定逻辑断言。
-   公共日期时间定义。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[getTimestamp]==],brief=[==[获得当前时间的时间戳]==],intro=[==[]==],usage=[==[UDateTime.getTimestamp()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={{name=[==[]==],type=[==[string]==],intro=[==[时间戳]==],},},},{name=[==[now]==],brief=[==[获得当前时间]==],intro=[==[]==],usage=[==[UDateTime.getTimestamp()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={{name=[==[]==],type=[==[string]==],intro=[==[时间戳]==],},},},},},{name=[==[UException.lua]==],path=[==[bbframework.shared.util.UException.lua]==],brief=[==[异常工具类，定义异常相关操作方法及逻辑实现。]==],intro=[==[-   指定逻辑异常。
-   公共异常定义。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[raiseAssertionException]==],brief=[==[抛出断言异常。用来指示一个断言失败的情况。]==],intro=[==[]==],usage=[==[UException.raiseAssertionException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseRuntimeException]==],brief=[==[抛出运行时异常。是所有Lua加载器正常操作期间可以被抛出的异常的父类。]==],intro=[==[]==],usage=[==[UException.raiseRuntimeException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseVerifyException]==],brief=[==[抛出验证错误异常。当验证器检测到某个类文件中存在内部不兼容或者安全问题时抛出该错误。]==],intro=[==[]==],usage=[==[UException.raiseVerifyException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseUnknownException]==],brief=[==[抛出未知异常。用于指示Lua加载器发生了未知严重错误的情况。]==],intro=[==[]==],usage=[==[UException.raiseUnknownException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseInternalErrorException]==],brief=[==[抛出内部错误异常。用于指示Lua加载器发生了内部错误。]==],intro=[==[]==],usage=[==[UException.raiseInternalErrorException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseUnRunHereException]==],brief=[==[抛出无法运行到此处异常]==],intro=[==[]==],usage=[==[UException.raiseUnRunHereException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseUnsupportedOperationException]==],brief=[==[抛出不支持的方法异常。指明请求的方法不被支持情况的异常.]==],intro=[==[]==],usage=[==[UException.raiseUnsupportedOperationException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseNilException]==],brief=[==[抛出空对象异常]==],intro=[==[]==],usage=[==[UException.raiseNilException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseLinkageException]==],brief=[==[抛出链接异常。该错误及其所有子类指示某个类依赖于另外一些类，在该类编译之后，被依赖的类改变了其类定义而没有重新编译所有的类，进而引发错误的情况。]==],intro=[==[]==],usage=[==[UException.raiseLinkageException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseUnsatisfiedLinkException]==],brief=[==[抛出未满足的链接错误。当Lua加载器未找到某个类的声明时抛出。]==],intro=[==[]==],usage=[==[UException.raiseUnsatisfiedLinkException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseInstantiationException]==],brief=[==[抛出实例化异常。当一个应用试图通过Lua的new操作符构造一个抽象类或者接口时抛出该异常.]==],intro=[==[]==],usage=[==[UException.raiseInstantiationException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseTypeNotPresentException]==],brief=[==[抛出类型不存在异常。当应用试图以某个类型名称的字符串表达方式访问该类型，但是根据给定的名称又找不到该类型是抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseTypeNotPresentException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseClassCastException]==],brief=[==[抛出类型强制转换异异常]==],intro=[==[]==],usage=[==[UException.raiseClassCastException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseClassCircularityException]==],brief=[==[抛出类循环依赖异常。在初始化一个类时，若检测到类之间循环依赖则抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseClassCircularityException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseClassFormatException]==],brief=[==[抛出类格式异常。当试图从一个文件中读取Lua类，而检测到该文件的内容不符合类的有效格式时抛出。]==],intro=[==[]==],usage=[==[UException.raiseClassFormatException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseUnsupportedClassVersionException]==],brief=[==[抛出不支持的类版本异常。当Lua加载器试图从读取某个类文件，但是发现该文件的主、次版本号允许被加载的时候，抛出该错误。]==],intro=[==[]==],usage=[==[UException.raiseUnsupportedClassVersionException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseIncompatibleClassChangeException]==],brief=[==[抛出不兼容的类变化异常。当正在执行的方法所依赖的类定义发生了不兼容的改变时，抛出该异常。一般在修改了应用中的某些类的声明定义而没有对整个应用重新编译而直接运行的情况下，容易引发该错误。]==],intro=[==[]==],usage=[==[UException.raiseIncompatibleClassChangeException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseNoClassDefFoundException]==],brief=[==[抛出未找到类定义异常。当Java虚拟机或者类装载器试图实例化某个类，而找不到该类的定义时抛出该错误。]==],intro=[==[]==],usage=[==[UException.raiseNoClassDefFoundException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseUnimpletentException]==],brief=[==[抛出方法没有实现异常]==],intro=[==[]==],usage=[==[UException.raiseUnimpletentException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseAbstractMethodException]==],brief=[==[抛出抽象方法异常。当应用试图调用抽象方法时抛出]==],intro=[==[]==],usage=[==[UException.raiseAbstractMethodException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseNoSuchMethodException]==],brief=[==[抛出方法未找到异常]==],intro=[==[]==],usage=[==[UException.raiseNoSuchMethodException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseNoSuchMethodException]==],brief=[==[抛出方法不存在异常。当应用试图调用某类的某个方法，而该类的定义中没有该方法的定义时抛出该错误。]==],intro=[==[]==],usage=[==[UException.raiseNoSuchMethodException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseNoSuchFieldException]==],brief=[==[抛出字段不存在异常。当应用试图访问或者修改某类的某个字段，而该类的定义中没有该字段的定义时抛出该错误。]==],intro=[==[]==],usage=[==[UException.raiseNoSuchFieldException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseIllegalAccessException]==],brief=[==[抛出违法访问异常。当一个应用试图访问、修改某个类的域（Field）或者调用其方法，但是又违反域或方法的可见性声明，则抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseIllegalAccessException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseArithmeticExecption]==],brief=[==[抛出算术异常]==],intro=[==[]==],usage=[==[UException.raiseArithmeticExecption(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseNumberFormatException]==],brief=[==[抛出转换类型到数字失败异常]==],intro=[==[]==],usage=[==[UException.raiseNumberFormatException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseStringIndexOutOfBoundsException]==],brief=[==[抛出字符串索引越界异常。当使用索引值访问某个字符串中的字符，而该索引值小于0或大于等于序列大小时，抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseStringIndexOutOfBoundsException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseNegativeArrayException]==],brief=[==[抛出数组下标为负异常]==],intro=[==[]==],usage=[==[UException.raiseNegativeArrayException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseArrayIndexOutOfBoundsException]==],brief=[==[抛出数组下标越界异常]==],intro=[==[]==],usage=[==[UException.raiseArrayIndexOutOfBoundsException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseArrayStoreException]==],brief=[==[抛出数组存储异常。当向数组中存放非数组声明类型对象时抛出。]==],intro=[==[]==],usage=[==[UException.raiseArrayStoreException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseEnumConstantNotPresentException]==],brief=[==[抛出枚举常量不存在异常。当应用试图通过名称和枚举类型访问一个枚举对象，但该枚举对象并不包含常量时，抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseEnumConstantNotPresentException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseCloneNotSupportedException]==],brief=[==[抛出不支持克隆异常。当没有实现Cloneable接口或者不支持克隆方法时,调用其clone()方法则抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseCloneNotSupportedException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseStackOverflowException]==],brief=[==[抛出堆栈溢出异常。当一个应用递归调用的层次太深而导致堆栈溢出时抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseStackOverflowException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseIndexOutOfBoundsException]==],brief=[==[抛出索引越界异常。当访问某个序列的索引值小于0或大于等于序列大小时，抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseIndexOutOfBoundsException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseSQLException]==],brief=[==[抛出操作数据库异常]==],intro=[==[]==],usage=[==[UException.raiseSQLException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseEOFException]==],brief=[==[抛出文件已结束异常]==],intro=[==[]==],usage=[==[UException.raiseEOFException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseFileNotFoundException]==],brief=[==[抛出文件未找到异常]==],intro=[==[]==],usage=[==[UException.raiseFileNotFoundException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseIOException]==],brief=[==[抛出操作数据库异常]==],intro=[==[]==],usage=[==[UException.raiseIOException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseInterruptedException]==],brief=[==[抛出被中止异常异常。]==],intro=[==[]==],usage=[==[UException.raiseInterruptedException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseThreadDeathException]==],brief=[==[抛出线程结束异常。当调用Thread类的stop方法时抛出该错误，用于指示线程结束。]==],intro=[==[]==],usage=[==[UException.raiseThreadDeathException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseIllegalThreadStateException]==],brief=[==[抛出违法的线程状态异常。当县城尚未处于某个方法的合法调用状态，而调用了该方法时，抛出异常。]==],intro=[==[]==],usage=[==[UException.raiseIllegalThreadStateException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseIllegalStateException]==],brief=[==[抛出违法的状态异常。当在Lua环境和应用尚未处于某个方法的合法调用状态，而调用了该方法时，抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseIllegalStateException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseOutOfMemoryException]==],brief=[==[抛出内存不足异常。当可用内存不足以让Java虚拟机分配给一个对象时抛出该错误。]==],intro=[==[]==],usage=[==[UException.raiseOutOfMemoryException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseInInitializerException]==],brief=[==[抛出初始化程序异常。当执行一个类的初始化程序的过程中，发生了异常时抛出。]==],intro=[==[]==],usage=[==[UException.raiseInInitializerException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseSecturityException]==],brief=[==[抛出违背安全原则异常]==],intro=[==[]==],usage=[==[UException.raiseSecturityException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseIllegalMonitorStateException]==],brief=[==[抛出违法的监控状态异常。当某个线程试图等待一个自己并不拥有的对象（O）的监控器或者通知其他线程等待该对象（O）的监控器时，抛出该异常。]==],intro=[==[]==],usage=[==[UException.raiseIllegalMonitorStateException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},{name=[==[raiseLuaLoaderException]==],brief=[==[抛出Lua加载器异常。用于指示加载器被破坏或者继续执行操作所需的资源不足的情况。]==],intro=[==[]==],usage=[==[UException.raiseLuaLoaderException(提示标签)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[tag]==],type=[==[string]==],intro=[==[提示标签]==],},},returns={},},},},{name=[==[UFunction.lua]==],path=[==[bbframework.shared.util.UFunction.lua]==],brief=[==[方法工具类，定义方法相关操作方法及逻辑实现。]==],intro=[==[-   指定方法反射逻辑。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[handler]==],brief=[==[构造函数，以传入的方法名和参数进行构建.]==],intro=[==[]==],usage=[==[UFunction.handler(参数, 方法)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[target]==],type=[==[object]==],intro=[==[参数]==],},{name=[==[method]==],type=[==[function]==],intro=[==[方法]==],},},returns={{name=[==[]==],type=[==[function]==],intro=[==[构建的以传入方法和参数组合后的函数]==],},},},{name=[==[existToRunFunction]==],brief=[==[返回包装后的执行方法，方法功能为：如果传入方法存在，则执行.]==],intro=[==[]==],usage=[==[UFunction.existToRunFunction(调用方法, 可变参数集合)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[fn]==],type=[==[function]==],intro=[==[调用方法]==],},{name=[==[...]==],type=[==[...]==],intro=[==[可变参数集合]==],},},returns={{name=[==[]==],type=[==[function]==],intro=[==[构建后的函数]==],},},},{name=[==[fnFormat]==],brief=[==[非立即调用方法, 用于函数式编程时传递函数.]==],intro=[==[]==],usage=[==[UFunction.fnFormat(调用方法, 可变参数集合)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[fn]==],type=[==[function]==],intro=[==[调用方法]==],},{name=[==[...]==],type=[==[...]==],intro=[==[可变参数集合]==],},},returns={{name=[==[]==],type=[==[function]==],intro=[==[构建后的函数]==],},},},{name=[==[existToRun]==],brief=[==[非立即调用方法, 用于函数式编程时传递函数.]==],intro=[==[]==],usage=[==[UFunction.existToRun(拥有方法的对象, 调用方法名称, 附带的参数)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[object]==],type=[==[function]==],intro=[==[拥有方法的对象]==],},{name=[==[methodName]==],type=[==[function]==],intro=[==[调用方法名称]==],},{name=[==[...]==],type=[==[...]==],intro=[==[附带的参数]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[返回执行方法后的结果]==],},},},{name=[==[delayCall]==],brief=[==[延迟调用指定方法.]==],intro=[==[]==],usage=[==[UFunction.delayCall(延迟时间, 调用方法, 参数列表)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[time]==],type=[==[number]==],intro=[==[延迟时间]==],},{name=[==[fn]==],type=[==[function]==],intro=[==[调用方法]==],},{name=[==[...]==],type=[==[...]==],intro=[==[参数列表]==],},},returns={{name=[==[]==],type=[==[object]==],intro=[==[调度器函数指针]==],},},},{name=[==[sendCallbackLuaMessage]==],brief=[==[发送指定Callback回调参数的Lua消息方法.]==],intro=[==[]==],usage=[==[UFunction.sendCallbackLuaMessage(请求的消息ID, 请求到数据后的回调方法, 请求的参数)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[msgId]==],type=[==[number]==],intro=[==[请求的消息ID]==],},{name=[==[callback]==],type=[==[fun(items,params)]==],intro=[==[请求到数据后的回调方法]==],},{name=[==[params]==],type=[==[table]==],intro=[==[请求的参数]==],},},returns={},},{name=[==[requireDataWithFun]==],brief=[==[调用数据模型中的某个方法，并进行执行成功后回调处理.]==],intro=[==[]==],usage=[==[UFunction.requireDataWithFun(数据模型完整路径, 执行函数的方法名, 执行函数结束后的回调方法, 请求参数集合)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[modelPath]==],type=[==[string]==],intro=[==[数据模型完整路径]==],},{name=[==[fn]==],type=[==[string]==],intro=[==[执行函数的方法名]==],},{name=[==[callback]==],type=[==[fun(items,params)]==],intro=[==[执行函数结束后的回调方法]==],},{name=[==[data]==],type=[==[table]==],intro=[==[请求参数集合]==],},},returns={},},},},{name=[==[UHook.lua]==],path=[==[bbframework.shared.util.UHook.lua]==],brief=[==[陷门工具类，定义陷门相关操作方法及逻辑实现。]==],intro=[==[-   指定陷门逻辑。
-   提供便捷生成陷门接口。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[keyServer]==],brief=[==[获得陷门指令[开启服务器列表](可凭借指令开启对应的陷门)]==],intro=[==[]==],usage=[==[UHook.keyServer()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={},},{name=[==[keyFight]==],brief=[==[获得陷门指令[开启战斗无敌指令](可凭借指令开启对应的陷门)]==],intro=[==[]==],usage=[==[UHook.keyFight()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={},},{name=[==[hookServer]==],brief=[==[生成陷门文件[服务器列表]]==],intro=[==[]==],usage=[==[UHook.hookServer()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={},},{name=[==[hookFight]==],brief=[==[生成陷门文件[战斗]]==],intro=[==[]==],usage=[==[UHook.hookFight()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={},},{name=[==[existsServer]==],brief=[==[是否存在陷门文件[服务器列表]]==],intro=[==[]==],usage=[==[UHook.existsServer()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={{name=[==[]==],type=[==[bool]==],intro=[==[是否存在陷门文件的布尔值]==],},},},{name=[==[existsFight]==],brief=[==[是否存在陷门文件[战斗]]==],intro=[==[]==],usage=[==[UHook.existsFight()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={{name=[==[]==],type=[==[bool]==],intro=[==[是否存在陷门文件的布尔值]==],},},},{name=[==[cryptoFileNameServer]==],brief=[==[获得加密文件名[服务器列表]]==],intro=[==[]==],usage=[==[UHook.cryptoFileNameServer()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={{name=[==[]==],type=[==[string]==],intro=[==[加载文件名]==],},},},{name=[==[cryptoFileNameFight]==],brief=[==[获得加密文件名[战斗]]==],intro=[==[]==],usage=[==[UHook.cryptoFileNameFight()]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={},returns={{name=[==[]==],type=[==[string]==],intro=[==[加载文件名]==],},},},{name=[==[cryptoID]==],brief=[==[获得加密ID]==],intro=[==[]==],usage=[==[UHook.cryptoID(陷门指令)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[command]==],type=[==[table]==],intro=[==[陷门指令]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[加载文件名]==],},},},},},{name=[==[UIO.lua]==],path=[==[bbframework.shared.util.UIO.lua]==],brief=[==[IO工具类，定义IO相关操作方法及逻辑实现。]==],intro=[==[-   公共IO逻辑定义。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[exists]==],brief=[==[判断文件是否存在]==],intro=[==[]==],usage=[==[UIO.exists(文件路径)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UIO.isExists]==]},},examples={},params={{name=[==[path]==],type=[==[string]==],intro=[==[文件路径]==],},},returns={{name=[==[]==],type=[==[bool]==],intro=[==[文件是否存在的布尔值]==],},},},{name=[==[filesize]==],brief=[==[获得文件内容长度]==],intro=[==[]==],usage=[==[UIO.filesize(文件路径)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UIO.fileSize]==]},},examples={},params={{name=[==[path]==],type=[==[string]==],intro=[==[文件路径]==],},},returns={{name=[==[]==],type=[==[number]==],intro=[==[文件内容长度]==],},},},{name=[==[pathinfo]==],brief=[==[返回文件信息]==],intro=[==[]==],usage=[==[UIO.pathinfo(文件路径)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UIO.pathInfo]==]},},examples={},params={{name=[==[path]==],type=[==[string]==],intro=[==[文件路径]==],},},returns={{name=[==[]==],type=[==[table]==],intro=[==[{ dirname = 目录名称, filename = 文件名称(包含扩展名), basename = 文件名称(不包含扩展名), extname = 文件扩展名, }]==],},},},{name=[==[fullPath]==],brief=[==[获得文件的完整路径]==],intro=[==[]==],usage=[==[UIO.fullPath(文件名/文件相对路径)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[path]==],type=[==[string]==],intro=[==[文件名/文件相对路径]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[文件的完整路径]==],},},},{name=[==[copyfile]==],brief=[==[复制文件, 返回是否操作成功标识]==],intro=[==[]==],usage=[==[UIO.copyfile(原始文件路径, 目的文件路径, 是否允许覆盖, 原始文件是否为绝对路径, 目的文件是否为绝对路径)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[src]==],type=[==[string]==],intro=[==[原始文件路径]==],},{name=[==[dest]==],type=[==[string]==],intro=[==[目的文件路径]==],},{name=[==[overwrite]==],type=[==[boolean]==],intro=[==[是否允许覆盖, 默认为true]==],},{name=[==[isAbsoluteSrc]==],type=[==[boolean]==],intro=[==[原始文件是否为绝对路径]==],},{name=[==[isAbsoluteDest]==],type=[==[boolean]==],intro=[==[目的文件是否为绝对路径]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[是否操作成功的布尔值]==],},},},{name=[==[readfile]==],brief=[==[读取文件内容]==],intro=[==[]==],usage=[==[UIO.readfile(文件路径)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UIO.readFile]==]},},examples={},params={{name=[==[path]==],type=[==[string]==],intro=[==[文件路径]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[文件内容]==],},},},{name=[==[writefile]==],brief=[==[写入文件内容]==],intro=[==[]==],usage=[==[UIO.writefile(文件路径, 文件内容, 模式)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UIO.writeFile]==]},},examples={},params={{name=[==[path]==],type=[==[string]==],intro=[==[文件路径]==],},{name=[==[content]==],type=[==[string]==],intro=[==[文件内容]==],},{name=[==[mode]==],type=[==[string]==],intro=[==[模式]==],},},returns={{name=[==[]==],type=[==[bool]==],intro=[==[是否写入成功的布尔值]==],},},},{name=[==[remove]==],brief=[==[删除文件或文件夹, 不存在则无反应]==],intro=[==[]==],usage=[==[UIO.remove(文件路径)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UIO.del]==]},{name=[==[UIO.delete]==]},},examples={},params={{name=[==[path]==],type=[==[string]==],intro=[==[文件路径]==],},},returns={},},},},{name=[==[ULanguage.lua]==],path=[==[bbframework.shared.util.ULanguage.lua]==],brief=[==[语言工具类，定义语言相关操作方法及逻辑实现。]==],intro=[==[-   指定语言公共方法。
-   声明可支持的语种常量。

    English 		－ 英国
    Chinese 		－ 中国
    French 			－ 法国
    Italian 		－ 意大利
    German 			－ 德语
    Spanish 		－ 西班牙
    Russian 		－ 俄罗斯
    Korean 			－ 韩国
    Japanese 		－ 日语
    Hungarian 		－ 匈牙利
    Portuguese 		－ 葡萄牙
    Arabic 			－ 阿拉伯]==],link=[==[]==],aliases={},fields={},methods={{name=[==[loadStrings]==],brief=[==[加载多语言文件, 若未加载成功, 将加载名称xxx_default的语言文件]==],intro=[==[]==],usage=[==[ULanguage.loadStrings(相对于res的路径名, 子路径, 多语言lua文件路径.lua, 指定用哪种语言, 如cn,en等)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[1.英文环境下
    ULanguage.loadStrings("scripts/", "language", "lan_game")       ==> load scripts/language/lang_game_en.lua
    2.强制指定使用中文
    ULanguage.loadStrings("scripts/", "language", "lan_game", "cn") ==> load scripts/language/lang_game_cn.lua]==],},},params={{name=[==[path]==],type=[==[string]==],intro=[==[相对于res的路径名, 不包含将要加到lua路径中的部分]==],},{name=[==[subpath]==],type=[==[string]==],intro=[==[在path之后, 将要被加入到lua路径的文件夹名, 不包含具体的lua文件名]==],},{name=[==[file]==],type=[==[string]==],intro=[==[多语言lua文件路径.lua require路径]==],},{name=[==[language]==],type=[==[string]==],intro=[==[指定用哪种语言, 如cn,en等]==],},},returns={},},{name=[==[valueOf]==],brief=[==[取得指定key多语言文字,若不存在且无默认值则直接返回key]==],intro=[==[]==],usage=[==[ULanguage.valueOf(语言key, 可变参数集合)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={},params={{name=[==[key]==],type=[==[string]==],intro=[==[语言key]==],},{name=[==[...]==],type=[==[string]==],intro=[==[可变参数集合, 用于字符串替换]==],},},returns={{name=[==[]==],type=[==[string]==],intro=[==[key对应的多语言信息]==],},},},},},{name=[==[ULayout.lua]==],path=[==[bbframework.shared.util.ULayout.lua]==],brief=[==[布局工具类，定义布局相关操作方法及逻辑实现。]==],intro=[==[-   定义结点的9向布局。
-   实现相对定位、参考定位。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[layout]==],brief=[==[排列结点到屏幕]==],intro=[==[]==],usage=[==[ULayout.layout(结点[, 排列方式, 偏离量])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[ULayout.alignNodeScreen]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：9宫定位>>
    -- 添加场景
    local scene = D.newScene("LayoutScene")
    local layer = D.newLayer()
    scene:add(layer)
    D.replaceScene(scene)

    -- 添加结点
    D.img("node.png"):to(layer):screen(D.TOP_LEFT)
    D.img("node.png"):to(layer):screen(D.TOP_CENTER)
    D.img("node.png"):to(layer):screen(D.TOP_RIGHT)
    D.img("node.png"):to(layer):screen(D.CENTER_LEFT)
    D.img("node.png"):to(layer):screen(D.CENTER)
    D.img("node.png"):to(layer):screen(D.CENTER_RIGHT)
    D.img("node.png"):to(layer):screen(D.BOTTOM_LEFT)
    D.img("node.png"):to(layer):screen(D.BOTTOM_CENTER)
    D.img("node.png"):to(layer):screen(D.BOTTOM_RIGHT)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[align]==],type=[==[int]==],intro=[==[排列方式, 默认为中心]==],},{name=[==[offset]==],type=[==[CCPoint]==],intro=[==[偏离量]==],},},returns={{name=[==[]==],type=[==[CCNode]==],intro=[==[结点对象]==],},},},{name=[==[layoutInner]==],brief=[==[排列结点，根据参考结点进行内框排列]==],intro=[==[]==],usage=[==[ULayout.layoutInner(结点, 参考结点[, 排列方式, 偏离量, 是否迭代子元素边框并合到自身])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[ULayout.alignNode]==]},{name=[==[ULayout.alignNodeInner]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：9宫定位>>
    -- 添加场景
    local scene = D.newScene("LayoutScene")
    local layer = D.newLayer()
    scene:add(layer)
    D.replaceScene(scene)

    -- 添加结点
    local parentNode = D.img("parent.png"):to(layer):p(V.p_2)
    D.img("child.png"):to(layer):inner(parentNode, D.TOP_LEFT)
    D.img("child.png"):to(layer):inner(parentNode, D.TOP_CENTER)
    D.img("child.png"):to(layer):inner(parentNode, D.TOP_RIGHT)
    D.img("child.png"):to(layer):inner(parentNode, D.CENTER_LEFT)
    D.img("child.png"):to(layer):inner(parentNode, D.CENTER)
    D.img("child.png"):to(layer):inner(parentNode, D.CENTER_RIGHT)
    D.img("child.png"):to(layer):inner(parentNode, D.BOTTOM_LEFT)
    D.img("child.png"):to(layer):inner(parentNode, D.BOTTOM_CENTER)
    D.img("child.png"):to(layer):inner(parentNode, D.BOTTOM_RIGHT)


    ---------


    -- 示例2: 
    -- <<说明：父子结点定位>>
    local parentNode = D.img("parent.png"):p(V.p_2):to(layer)
    local childNode  = D.img("child.png"):to(parentNode):inner(parentNode, D.CENTER)


    ---------


    -- 示例3: 
    -- <<说明：任意添加多个结点，结点之间层级关系任意，启用isCascade计算子将子元素边框合并到自身的boundingBox>>
    local img1_1 = D.img("node1.png",  100,  100):to(layer)
    local img1_2 = D.img("node1.png", -30 ,  400):to(img1_1)
    local img1_3 = D.img("node1.png",  500,  100):to(img1_2)
    local img2_1 = D.img("node2.png",  400,  400):to(layer)
    local img2_2 = D.img("node2.png", -100, -100):to(img2_1)
    local img2_3 = D.img("node2.png"):to(img2_2)
    ULayout.layoutInner(img2_3, img1_3, D.CENTER, CCPointZero, true)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[parentNode]==],type=[==[CCNode]==],intro=[==[参考结点]==],},{name=[==[align]==],type=[==[int]==],intro=[==[排列方式]==],},{name=[==[offset]==],type=[==[CCPoint]==],intro=[==[偏离量]==],},{name=[==[isCascade]==],type=[==[bool]==],intro=[==[是否迭代子元素边框并合到自身]==],},},returns={{name=[==[]==],type=[==[CCNode]==],intro=[==[结点对象]==],},},},{name=[==[layoutOutter]==],brief=[==[排列结点，根据参考结点进行外框排列]==],intro=[==[]==],usage=[==[ULayout.layoutOuter(结点, 参考结点[, 排列方式, 偏离量, 是否迭代子元素边框并合到自身])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[ULayout.alignNodeOuter]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：9宫定位>>
    -- 添加场景
    local scene = D.newScene("LayoutScene")
    local layer = D.newLayer()
    scene:add(layer)
    D.replaceScene(scene)

    -- 添加结点
    local parentNode = D.img("parent.png"):to(layer):p(V.p_2)
    D.img("child.png"):to(layer):outer(parentNode, D.TOP_LEFT)
    D.img("child.png"):to(layer):outer(parentNode, D.TOP_CENTER)
    D.img("child.png"):to(layer):outer(parentNode, D.TOP_RIGHT)
    D.img("child.png"):to(layer):outer(parentNode, D.CENTER_LEFT)
    D.img("child.png"):to(layer):outer(parentNode, D.CENTER)
    D.img("child.png"):to(layer):outer(parentNode, D.CENTER_RIGHT)
    D.img("child.png"):to(layer):outer(parentNode, D.BOTTOM_LEFT)
    D.img("child.png"):to(layer):outer(parentNode, D.BOTTOM_CENTER)
    D.img("child.png"):to(layer):outer(parentNode, D.BOTTOM_RIGHT)


    ---------


    -- 示例2: 
    -- <<说明：父子结点定位>>
    local parentNode = D.img("parent.png"):p(V.p_2):to(layer)
    local childNode  = D.img("child.png"):to(parentNode):outer(parentNode, D.LEFT_CENTER)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[parentNode]==],type=[==[CCNode]==],intro=[==[参考结点]==],},{name=[==[align]==],type=[==[int]==],intro=[==[排列方式]==],},{name=[==[offset]==],type=[==[CCPoint]==],intro=[==[偏离量]==],},{name=[==[isCascade]==],type=[==[bool]==],intro=[==[是否迭代子元素边框并合到自身]==],},},returns={{name=[==[]==],type=[==[CCNode]==],intro=[==[结点对象]==],},},},{name=[==[correct]==],brief=[==[校正结点，忽略结点锚点信息，将其定位到指定的位置]==],intro=[==[]==],usage=[==[ULayout.correct(结点, 目标位置[, 偏离量, 是否绝对定位(默认为false)])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：绝对定位在屏幕某个位置，忽略结点的父子层级关系>>
    -- 添加场景
    local scene = D.newScene("LayoutScene")
    local layer = D.newLayer()
    scene:add(layer)
    D.replaceScene(scene)

    -- 添加结点，将node锁定在屏幕中心处
    D.img("node.png"):p(V.p_2):to(layer)
    local node = D.img("node.png"):anchor(D.BOTTOM_CENTER):p(V.p_2):to(layer)
    layer:p(100, 100)
    ULayout.correct(node, V.p_2, CCPointZero, true)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[position]==],type=[==[CCPoint]==],intro=[==[目标位置]==],},{name=[==[offset]==],type=[==[CCPoint]==],intro=[==[偏离量]==],},{name=[==[isAbsolute]==],type=[==[bool]==],intro=[==[是否绝对定位(默认为false)]==],},},returns={{name=[==[]==],type=[==[CCNode]==],intro=[==[结点对象]==],},},},},},{name=[==[UNode.lua]==],path=[==[bbframework.shared.util.UNode.lua]==],brief=[==[结点工具类，定义结点相关操作方法及逻辑实现。]==],intro=[==[-   指定结点逻辑。
-   提供便捷生成结点接口。]==],link=[==[]==],aliases={},fields={},methods={{name=[==[toggle]==],brief=[==[在结点方法集合中顺序切换结点方法]==],intro=[==[]==],usage=[==[UNode.toggle(结点, 方法集合[, 方法参数])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.toggleCycle]==]},{name=[==[UNode.callCycle]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：定义方法序列, 调用toggle进行顺序执行>>
    local node = D.img("node.png"):p(V.p_2):to(layer)
    function node:method1()
        print("method1", self)
    end
    function node:method2()
        print("method2", self)
    end
    function node:method3()
        print("method3", self)
    end
    local functionNames = {
        "method1",
        "method2",
        "method3",
    }
    for i = 1, 10 do
        UNode.toggle(node, functionNames, node)
    end]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[functionNames]==],type=[==[table]==],intro=[==[方法集合]==],},{name=[==[...]==],type=[==[...]==],intro=[==[方法参数]==],},},returns={{name=[==[]==],type=[==[CCNode]==],intro=[==[结点]==],},},},{name=[==[toggleRandom]==],brief=[==[在结点方法集合中随机切换结点方法]==],intro=[==[]==],usage=[==[UNode.toggleRandom(结点, 方法集合[, 方法参数])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.callRandom]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：随机获得结点的某个方法进行打印>>
    -- 实例化结点
    local node = D.img("node.png"):p(CCPointCenter):to(layer)

    -- 定义随机方法集合
    local functionNames = {
        "px",
        "py",
        "scale"
    }
    print(UNode.toggleRandom(node, functionNames, node))]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[functionNames]==],type=[==[table]==],intro=[==[方法集合]==],},{name=[==[...]==],type=[==[...]==],intro=[==[方法参数]==],},},returns={{name=[==[]==],type=[==[CCNode]==],intro=[==[结点]==],},},},{name=[==[switchDisplayAndPlace]==],brief=[==[交替显示结点, 用于两结点在同一位置, 一次只显示其中一个而隐藏另一个的情况]==],intro=[==[]==],usage=[==[UNode.switchDisplayAndPlace(将要显示的结点, 将要隐藏的结点[, 结点互换])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：切换两结点显示, 一个时刻只允许一个结点在屏幕中显示, 另一个隐藏>>
    local node1 = D.img("node1.png"):p(V.p_2):to(layer)
    local node2 = D.img("node2.png"):p(300, 300):to(layer)

    isSwap = false
    local function autoToggle(time)
        -- 获得要显示及隐藏的结点
        local nodeShow, nodeHide = swap(node1, node2, isSwap)
        
        -- 让显示结点显示
        UNode.switchDisplayAndPlace(nodeShow, nodeHide)

        F.delayCall(time, function()
            isSwap = not isSwap
            Log.d(game.TAG, "swap nodes: " .. tostring(isSwap))
            autoToggle(time)
        end)
    end
    
    autoToggle(1.0)]==],},},params={{name=[==[nodeShowing]==],type=[==[CCNode]==],intro=[==[将要显示的结点]==],},{name=[==[nodeHiding]==],type=[==[CCNode]==],intro=[==[将要隐藏的结点]==],},{name=[==[isSwap]==],type=[==[boolean]==],intro=[==[结点互换, 默认为false]==],},},returns={},},{name=[==[switchDisplay]==],brief=[==[交替显示结点, 可以定制是否需要切换坐标位置及交换结点顺序等]==],intro=[==[]==],usage=[==[UNode.switchDisplay(将要显示的结点, 将要隐藏的结点[, 坐标位置互换, 结点互换])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：切换两结点显示, 一个时刻只允许一个结点在屏幕中显示, 另一个隐藏>>
    local node1 = D.img("node1.png"):p(V.p_2):to(layer)
    local node2 = D.img("node2.png"):p(300, 300):to(layer)

    isSwap = false
    local function autoToggle(time)
        -- 获得要显示及隐藏的结点
        local nodeShow, nodeHide = swap(node1, node2, isSwap)
        
        -- 让显示结点显示
        UNode.switchDisplay(nodeShow, nodeHide, true)

        F.delayCall(time, function()
            isSwap = not isSwap
            Log.d(game.TAG, "swap nodes: " .. tostring(isSwap))
            autoToggle(time)
        end)
    end
    
    autoToggle(1.0)]==],},},params={{name=[==[nodeShowing]==],type=[==[CCNode]==],intro=[==[将要显示的结点]==],},{name=[==[nodeHiding]==],type=[==[CCNode]==],intro=[==[将要隐藏的结点]==],},{name=[==[isPlace]==],type=[==[boolean]==],intro=[==[坐标位置互换, 默认为false]==],},{name=[==[isSwap]==],type=[==[boolean]==],intro=[==[结点互换, 默认为false]==],},},returns={},},{name=[==[showOnly]==],brief=[==[同一容器中只显示其中一个结点, 其它的移出可视区域并隐藏]==],intro=[==[如果未传入参数position，则遍历容器内结点，找到头一个显示结点的位置作为其显示位置]==],usage=[==[UNode.showOnly(容器, 将要显示的结点[, 显示位置])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：只显示子结点中的某个结点, 并将其校正在指定的位置>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child1 = D.img("child.png"):p(100, 100):to(parent)
    local child2 = D.img("child.png"):p(200, 200):to(parent)
    local child3 = D.img("child.png"):p(300, 300):to(parent)

    UNode.showOnly(parent, child2, V.p_2)]==],},},params={{name=[==[container]==],type=[==[CCNode]==],intro=[==[容器]==],},{name=[==[nodeShowing]==],type=[==[CCNode/int]==],intro=[==[将要显示的结点]==],},{name=[==[position]==],type=[==[CCPoint]==],intro=[==[显示位置]==],},},returns={},},{name=[==[isVisibleCascade]==],brief=[==[判断结点及其祖先结点是否都可见]==],intro=[==[]==],usage=[==[isVisible = UNode.isVisibleCascade(结点)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：判断结点及其祖先结点是否都可见>>
    local node = D.img("node.png"):p(V.p_2):to(layer)
    print("isVisibleCascade: ", UNode.isVisibleCascade(node))]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},},returns={},},{name=[==[hideChildrenExcept]==],brief=[==[隐藏结点的所有子结点，除开指定结点]==],intro=[==[]==],usage=[==[UNode.hideChildrenExcept(结点, ...)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：判断所有子结点, 除了node1>>
    local node1 = D.img("node.png"):p(100, 100):to(layer)
    local node2 = D.img("node.png"):p(200, 200):to(layer)
    local node3 = D.img("node.png"):p(300, 300):to(layer)
    UNode.hideChildrenExcept(layer, node1)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},},returns={},},{name=[==[isPointInNode]==],brief=[==[判断指定坐标是否在结点内部]==],intro=[==[]==],usage=[==[local isInside = UNode.isPointInNode(结点, 位置x, 位置y)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.isPointInNode]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：判断点是否在结点内部>>
    local node  = D.img("node.png"):p(CCPointCenter):to(layer)
    print("isInside: ", UNode.isPointInNode(node, ccp(480, 330)))]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[x]==],type=[==[number/CCPoint]==],intro=[==[位置x/位置]==],},{name=[==[y]==],type=[==[number]==],intro=[==[位置y]==],},},returns={{name=[==[]==],type=[==[bool]==],intro=[==[指定坐标是否在结点内部的布尔值]==],},},},{name=[==[copyProperties]==],brief=[==[拷贝结点属性]==],intro=[==[]==],usage=[==[UNode.copyProperties(目标结点, 原始结点)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：复制结点属性>>
    local node1 = D.img("node.png"):p(CCPointCenter):to(layer)
    local node2 = D.img("node.png")

    node1:anchor(D.LEFT)
    node1:scale(.8)
    node1:z(300)
    -- ..

    -- 复制属性
    UNode.copyProperties(node2, node1)

    -- 打印输出
    print("ContentSize: ", node2:getContentSize())
    print("Position: ", node2:getPosition())
    print("AnchorPoint: ", node2:getAnchorPoint())
    print("Rotation: ", node2:getRotation())
    print("Opacity: ", node2:getOpacity())
    print("Scale: ", node2:getScale())
    print("Color: ", node2:getColor())
    print("Tag: ", node2:getTag())
    print("ZOrder: ", node2:getZOrder())]==],},},params={{name=[==[nodeTo]==],type=[==[CCNode]==],intro=[==[目标结点]==],},{name=[==[nodeFrom]==],type=[==[CCNode]==],intro=[==[原始结点]==],},},returns={},},{name=[==[toggleVisiblity]==],brief=[==[切换结点显示]==],intro=[==[]==],usage=[==[UNode.toggleVisiblity(结点)]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.switchVisiblity]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：每隔1秒钟进行结点显示隐藏切换>>
    local node = D.img("node.png"):p(V.p_2):to(self)
    local function autoToggle(node, time)
        F.delayCall(time, function()
            UNode.toggleVisiblity(node)
            autoToggle(node, time)
        end)
    end
    
    autoToggle(node, 1.0)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},},returns={{name=[==[]==],type=[==[CCNode]==],intro=[==[结点]==],},},},{name=[==[getSize]==],brief=[==[获得结点的实际尺寸]==],intro=[==[]==],usage=[==[UNode.getSize(结点[, 是否迭代子元素, ])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.getSize]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：结点尺寸(不累加子结点区域)>>
    local node = D.img("node.png"):p(V.p_2):to(self)
    local size = UNode.getSize(node, false)
    printCCSize(size)


    ---------


    -- 示例2: 
    -- <<说明：转换结点到类型[CCLayer]>>
    UConvert.toCCLayer(object)


    ---------


    -- 示例3: 
    -- <<说明：转换结点到类型[CCSprite]>>
    UConvert.toCCSprite(object)


    ---------


    -- 示例4: 
    -- <<说明：转换结点到类型[CCLabel]>>
    UConvert.toCCLabel(object)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[isCascade]==],type=[==[bool]==],intro=[==[是否迭代子元素]==],},{name=[==[expand]==],type=[==[number/CCRect]==],intro=[==[扩张范围/百分比]==],},},returns={{name=[==[]==],type=[==[CCSize]==],intro=[==[结点实际尺寸]==],},},},{name=[==[getWidth]==],brief=[==[获得百分比宽度]==],intro=[==[]==],usage=[==[UNode.getWidth(结点[, 是否计算子结点尺寸合并到自身])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.width]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：显示结点设置isCascade属性前后的差别>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = D.img( "child.png"):p(500, 500):to(parent)
    local widthOrigin  = UNode.getWidth(parent, false)
    local widthCascade = UNode.getWidth(parent, true)
    print(" origin width", widthOrigin)
    print("cascade width", widthCascade)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[isCascade]==],type=[==[number]==],intro=[==[是否计算子结点尺寸合并到自身, 默认为真]==],},},returns={{name=[==[]==],type=[==[number]==],intro=[==[结点宽度]==],},},},{name=[==[getHeight]==],brief=[==[获得百分比高度]==],intro=[==[]==],usage=[==[UNode.getWidth(结点[, 是否计算子结点尺寸合并到自身])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.height]==]},},examples={{name=[==[示例]==],intro=[==[-- 示例1: 
    -- <<说明：显示结点设置isCascade属性前后的差别>>
    local parent = D.img("parent.png"):p(V.p_2):to(layer)
    local child  = D.img( "child.png"):p(500, 500):to(parent)
    local heightOrigin  = UNode.getHeight(parent, false)
    local heightCascade = UNode.getHeight(parent, true)
    print(" origin height", heightOrigin)
    print("cascade height", heightCascade)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[isCascade]==],type=[==[number]==],intro=[==[是否计算子结点尺寸合并到自身, 默认为真]==],},},returns={{name=[==[]==],type=[==[number]==],intro=[==[结点高度]==],},},},{name=[==[getPercentageWidth]==],brief=[==[获得百分比宽度]==],intro=[==[]==],usage=[==[UNode.getPercentageWidth(结点, 百分比[, 是否计算子结点尺寸合并到自身])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.percentageWidth]==]},{name=[==[UNode.pwidth]==]},},examples={{name=[==[示例]==],intro=[==[local node              = D.img("node.png"):p(V.p_2):to(layer)
    local widthOrigin       = UNode.getWidth(node, true)
    local widthPercentage   = UNode.getPercentageWidth(node, 20, true)
    print("origin width": widthOrigin)
    print("percentage width": widthPercentage)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[percentage]==],type=[==[number]==],intro=[==[百分比]==],},{name=[==[isCascade]==],type=[==[number]==],intro=[==[是否计算子结点尺寸合并到自身, 默认为真]==],},},returns={{name=[==[]==],type=[==[number]==],intro=[==[百分比宽度]==],},},},{name=[==[getPercentageHeight]==],brief=[==[获得百分比高度]==],intro=[==[]==],usage=[==[UNode.getPercentageHeight(结点, 百分比[, 是否计算子结点尺寸合并到自身])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.percentageHeight]==]},{name=[==[UNode.pheight]==]},},examples={{name=[==[示例]==],intro=[==[local node              = D.img("node.png"):p(V.p_2):to(layer)
    local heightOrigin       = UNode.getHeight(node, true)
    local heightPercentage   = UNode.getPercentageHeight(node, 20, true)
    print("origin height": heightOrigin)
    print("percentage height": heightPercentage)]==],},},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[percentage]==],type=[==[number]==],intro=[==[百分比]==],},{name=[==[isCascade]==],type=[==[number]==],intro=[==[是否计算子结点尺寸合并到自身, 默认为真]==],},},returns={{name=[==[]==],type=[==[number]==],intro=[==[百分比高度]==],},},},{name=[==[scale]==],brief=[==[获得结点的实际缩放比例]==],intro=[==[]==],usage=[==[UNode.scale(结点[, 是否迭代子元素])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.realScale]==]},},examples={},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[isCascade]==],type=[==[bool]==],intro=[==[是否迭代子元素]==],},},returns={{name=[==[]==],type=[==[number]==],intro=[==[结点实际缩放比例]==],},},},{name=[==[scaleX]==],brief=[==[获得结点的实际缩放比例x]==],intro=[==[]==],usage=[==[UNode.scaleX(结点[, 是否迭代子元素])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.scalex]==]},{name=[==[UNode.realScalex]==]},{name=[==[UNode.realScaleX]==]},},examples={},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[isCascade]==],type=[==[bool]==],intro=[==[是否迭代子元素]==],},},returns={{name=[==[]==],type=[==[number]==],intro=[==[结点实际缩放比例]==],},},},{name=[==[scaleY]==],brief=[==[获得结点的实际缩放比例y]==],intro=[==[]==],usage=[==[UNode.scaleY(结点[, 是否迭代子元素])]==],notice=[==[]==],state=[==[1]==],link=[==[]==],aliases={{name=[==[UNode.scaley]==]},{name=[==[UNode.realScaley]==]},{name=[==[UNode.realScaleY]==]},},examples={},params={{name=[==[node]==],type=[==[CCNode]==],intro=[==[结点]==],},{name=[==[isCascade]==],type=[==[bool]==],intro=[==[是否迭代子元素]==],},},returns={{name=[==[]==],type=[==[number]==],intro=[==[结点实际缩放比例]==],},},},},},},others={},},},others={},},},others={},}